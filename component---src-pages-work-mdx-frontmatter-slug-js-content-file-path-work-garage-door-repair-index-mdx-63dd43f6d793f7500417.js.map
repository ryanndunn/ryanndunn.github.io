{"version":3,"file":"component---src-pages-work-mdx-frontmatter-slug-js-content-file-path-work-garage-door-repair-index-mdx-63dd43f6d793f7500417.js","mappings":"8NAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,6BAClD,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BCNA,MAAMU,EAAWC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAAS,EAChC,OAAON,EAAAA,cAAoBO,EAAAA,EAAQ,CACjCC,mBAAoB,qBACnBR,EAAAA,cAAoBS,EAAAA,EAAU,CAC/BC,IAAKL,EAAKM,IAAIC,YAAYC,eAC1BC,MAAOT,EAAKM,IAAIC,YAAYE,QAC1Bd,EAAAA,cAAoB,MAAO,CAC7Be,UAAW,iBACVT,GAAU,EAeFU,EAAO,IAAMhB,EAAAA,cAAoBiB,EAAAA,EAAK,CACjDH,MAAO,qBAGM,SAASI,EAAiBzB,GACvC,OAAOO,EAAAA,cAAoBG,EAAUV,EAAOO,EAAAA,cAAoBmB,EAAqB1B,GACvF,C,+CCOA,IAvCiB,IAAqB,IAApB,IAAEiB,EAAG,MAAEI,GAAO,EA0B9B,OAJAM,OAAOC,iBAAiB,UApBxB,WAEE,MAAMC,EAAkBF,OAAOG,SAAWH,OAAOI,YAC3CC,EAAQC,SAASC,cAAc,6DAO/BC,EAAe,eADF,KAFSN,EADPF,OAAOS,aAIuC,MAEtD,OAAVJ,IACDA,EAAMK,MAAMC,UAAYH,EAG5B,IASE,uBAAKb,UAAU,cACb,uBAAKA,UAAU,0BACX,gBAAC,EAAAiB,EAAW,CACVP,OAAOQ,EAAAA,EAAAA,GAASvB,GAChBwB,IAAQpB,EAAK,qBAGnB,0BAAKA,GACD,C,sECLH,MAAMqB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBrC,GAC/B,MAAMsC,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfpC,EACFA,EAAWsC,GAGb,IAAIA,KAAsBtC,IAChC,CAACsC,EAAmBtC,GACzB,C","sources":["webpack://ryan-dunn-portfolio/./work/garage-door-repair/index.mdx","webpack://ryan-dunn-portfolio/./src/pages/work/{mdx.frontmatter__slug}.js","webpack://ryan-dunn-portfolio/./src/components/page-head.js","webpack://ryan-dunn-portfolio/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"Garage Door Repair Content\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/ryandunn/Desktop/dunnsite/ryan-dunn-portfolio/work/garage-door-repair/index.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../../components/layout';\nimport PageHead from '../../components/page-head';\nimport Seo from '../../components/seo';\nconst WorkPost = ({data, children}) => {\n  return React.createElement(Layout, {\n    pageContainerClass: \"page--work-single\"\n  }, React.createElement(PageHead, {\n    img: data.mdx.frontmatter.featured_image,\n    title: data.mdx.frontmatter.title\n  }), React.createElement(\"div\", {\n    className: \"page--content\"\n  }, children));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        featured_image {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n      }\n    }\n  }`;\nexport const Head = () => React.createElement(Seo, {\n  title: \"Portfolio Single\"\n});\nWorkPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(WorkPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from 'react'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\n\nconst PageHead = ({ img, title }) => {\n\n  function moveImages() {\n    \n    const windowScrollTop = window.scrollY || window.pageYOffset;\n    const image = document.querySelector('.page--head .page--head_img-contain .gatsby-image-wrapper');\n\n    //const elementScrollTop = image.scrollTop;\n    const windowHeight = window.innerHeight;\n    const scrollPxPastTrigger = windowScrollTop;\n    const percentScrolled = scrollPxPastTrigger / windowHeight;\n    const moveLength = 100;\n    const transformString = `translateY(-${moveLength * percentScrolled}px)`;\n\n    if(image !== null){\n      image.style.transform = transformString;\n    }\n\n  }\n\n  //moveImages();\n\n  window.addEventListener('scroll', moveImages);\n\n\n\n  return (\n    <div className=\"page--head\">\n      <div className=\"page--head_img-contain\">\n          <GatsbyImage\n            image={getImage(img)}\n            alt={`${title} Featured Image`}\n          />\n      </div>\n      <h1>{title}</h1>\n    </div>\n  )\n}\n\nexport default PageHead","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","WorkPost","_ref","data","children","Layout","pageContainerClass","PageHead","img","mdx","frontmatter","featured_image","title","className","Head","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","window","addEventListener","windowScrollTop","scrollY","pageYOffset","image","document","querySelector","transformString","innerHeight","style","transform","G","getImage","alt","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}